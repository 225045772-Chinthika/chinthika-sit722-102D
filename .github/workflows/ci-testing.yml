name: CI (testing) - Test, Build & Push
on:
  push:
    branches: [ testing ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/ci-testing.yml"

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:14
        env:
          POSTGRES_DB: productdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d productdb"
          --health-interval=10s --health-timeout=5s --health-retries=10  
      order_db:
        image: postgres:14
        env:
          POSTGRES_DB: orderdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d orderdb"
          --health-interval=10s --health-timeout=5s --health-retries=10  
      customer_db:
        image: postgres:14
        env:
          POSTGRES_DB: customerdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d customerdb"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - name: Install deps & run backend tests (skip if none)
        run: |
          set -e

          python -m pip install --upgrade pip

          # Optional: wait briefly for DB health (extra-safe even with health checks)
          sleep 10

          for svc in product_service order_service customer_service; do
            echo "---- $svc ----"

            # Install base requirements (if any)
            if [ -f backend/$svc/requirements.txt ]; then
              pip install -r backend/$svc/requirements.txt || true
            fi

            # Install dev/test requirements (httpx etc.)
            if [ -f backend/$svc/requirements-dev.txt ]; then
              pip install -r backend/$svc/requirements-dev.txt || true
            fi

            # Set DATABASE_URL per service so tests connect to the service container, not localhost
            if [ "$svc" = "product_service" ]; then
              export DATABASE_URL="postgresql://postgres:postgres@product_db:5432/productdb"
            elif [ "$svc" = "order_service" ]; then
              export DATABASE_URL="postgresql://postgres:postgres@order_db:5432/orderdb"
            else
              export DATABASE_URL="postgresql://postgres:postgres@customer_db:5432/customerdb"
            fi

            # Run tests if present
            if [ -d backend/$svc/tests ]; then
              echo "Running tests in $svc with DATABASE_URL=$DATABASE_URL"
              pytest backend/$svc/tests || (echo "Tests failed in $svc" && exit 1)
            else
              echo "No tests for $svc â€“ skipping"
            fi
          done

      - name: Azure login (SP)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}
          echo "ACR_LOGIN_SERVER=$(az acr show -n ${{ secrets.ACR_NAME }} --query loginServer -o tsv)" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build & push images (backends + frontend)
        run: |
          for image in product_service order_service customer_service frontend; do
            docker build -t $ACR_LOGIN_SERVER/$image:$IMAGE_TAG $( [[ "$image" == "frontend" ]] && echo frontend || echo backend/$image )
            docker push $ACR_LOGIN_SERVER/$image:$IMAGE_TAG
            # also tag latest for staging
            docker tag $ACR_LOGIN_SERVER/$image:$IMAGE_TAG $ACR_LOGIN_SERVER/$image:latest
            docker push $ACR_LOGIN_SERVER/$image:latest
          done