name: CD Stage 3 (Production Deploy on PR Merge)
#test

on:
  # Only when a PR targeting main is closed
  pull_request:
    branches: [main]
    types: [closed]

concurrency:
  group: prod
  cancel-in-progress: false

jobs:
  deploy:
    # Require it to be merged (not just closed)
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}      # e.g. myacr (no .azurecr.io)
      PROD_RG:  ${{ secrets.PROD_RG }}
      PROD_AKS: ${{ secrets.PROD_AKS }}
      NAMESPACE: sit722
      HEAD_SHA: ${{ github.event.pull_request.merge_commit_sha }}   # <-- define this

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Make sure prod AKS can pull from your ACR (safe to run every time)
      - name: Grant ACR pull to AKS (prod)
        run: |
          az aks update -g "$PROD_RG" -n "$PROD_AKS" --attach-acr "$ACR_NAME"

      - name: Get AKS credentials (prod)
        run: |
          az aks get-credentials -g "$PROD_RG" -n "$PROD_AKS" --overwrite-existing

      - name: Ensure namespace exists
        run: kubectl create namespace "$NAMESPACE" || true
       
      - name: Apply Kubernetes manifests
        run: kubectl apply -f k8s/ -n "$NAMESPACE"

      # NOTE: handle frontend specially (repo is 'frontend', not 'frontend-service')
      - name: Set images to the merge commit (auto-detect; handle frontend)
        run: |
          set -euo pipefail
          ACR="${ACR_NAME}.azurecr.io"
          for d in $(kubectl get deploy -n "$NAMESPACE" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'); do
            cname=$(kubectl get deploy/$d -n "$NAMESPACE" -o jsonpath='{.spec.template.spec.containers[0].name}')
            base="${cname%-service}"
            if [ "$base" = "frontend" ]; then
              repo="${ACR}/frontend:${HEAD_SHA}"
            else
              repo="${ACR}/${base}-service:${HEAD_SHA}"
            fi
            echo "Setting $d container=$cname -> $repo"
            kubectl set image deploy/$d $cname=$repo -n "$NAMESPACE" --record
          done

      - name: Verify images are the merge commit
        run: |
          set -euo pipefail
          ACR="${ACR_NAME}.azurecr.io"
          for d in $(kubectl get deploy -n "$NAMESPACE" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'); do
            cname=$(kubectl get deploy/$d -n "$NAMESPACE" -o jsonpath='{.spec.template.spec.containers[0].name}')
            base="${cname%-service}"
            if [ "$base" = "frontend" ]; then
              expected="${ACR}/frontend:${HEAD_SHA}"
            else
              expected="${ACR}/${base}-service:${HEAD_SHA}"
            fi
            img=$(kubectl get deploy/$d -n "$NAMESPACE" -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "$d -> $img (expected $expected)"
            test "$img" = "$expected"
          done

      - name: Quick diagnostics (non-blocking)
        continue-on-error: true
        run: |
          kubectl get deploy -n "$NAMESPACE" -o wide || true
          kubectl get pods   -n "$NAMESPACE" -o wide || true
          kubectl get svc    -n "$NAMESPACE" -o wide || true

      - name: Show public URLs (nice to have)
        run: |
          for s in product-service order-service customer-service; do
            ip=$(kubectl get svc $s -n "$NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            port=$(kubectl get svc $s -n "$NAMESPACE" -o jsonpath='{.spec.ports[0].port}')
            echo "$s => http://$ip:$port/"
          done
          ipf=$(kubectl get svc frontend -n "$NAMESPACE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "frontend => http://$ipf/"
