name: CD - staging (ephemeral AKS)

on:
  workflow_run:
    workflows: [ "CI - test, build, push (testing)" ]
    types: [ "completed" ]

env:
  LOCATION: ${{ secrets.LOCATION || 'australiaeast' }}
  ACR: ${{ secrets.ACR_NAME }}.azurecr.io

jobs:
  deploy_staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with: { creds: ${{ secrets.AZURE_CREDENTIALS }} }

      - name: Create staging RG + AKS, attach ACR
        id: make
        run: |
          STG_RG="sit722-stg-rg-${{ github.run_id }}"
          STG_AKS="sit722-stg-aks-${{ github.run_id }}"
          echo "STG_RG=$STG_RG" >> $GITHUB_ENV
          echo "STG_AKS=$STG_AKS" >> $GITHUB_ENV
          az group create -n $STG_RG -l "$LOCATION"
          az aks create -g $STG_RG -n $STG_AKS --node-count 1 --generate-ssh-keys
          az aks update  -g $STG_RG -n $STG_AKS --attach-acr ${{ secrets.ACR_NAME }}

      - name: Set kubectl context (staging)
        run: az aks get-credentials -g $STG_RG -n $STG_AKS --overwrite-existing

      - name: Apply namespace/config
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmaps.yaml
          # Create secret at runtime with a dummy key just for staging smoke tests (no blob write needed)
          kubectl create secret generic app-secrets -n sit722 \
            --from-literal=AZURE_STORAGE_ACCOUNT_KEY=dummy-staging-key

      - name: Deploy all services (staging images by commit)
        run: |
          # Use commit SHA images built by CI:
          kubectl apply -f k8s/product.yaml
          kubectl set image deploy/product-deploy -n sit722 \
            product-service=${{ env.ACR }}/product-service:${{ github.sha }}
          kubectl apply -f k8s/order.yaml
          kubectl set image deploy/order-deploy -n sit722 \
            order-service=${{ env.ACR }}/order-service:${{ github.sha }}
          kubectl apply -f k8s/customer.yaml
          kubectl set image deploy/customer-deploy -n sit722 \
            customer-service=${{ env.ACR }}/customer-service:${{ github.sha }}
          kubectl apply -f k8s/frontend.yaml
          kubectl set image deploy/frontend-deploy -n sit722 \
            frontend=${{ env.ACR }}/frontend:${{ github.sha }}

      - name: Wait for External IPs & smoke test
        run: |
          set -e
          # Wait for product IP
          for i in {1..30}; do
            PIP=$(kubectl get svc -n sit722 product-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'); \
            [[ -n "$PIP" ]] && break || sleep 10
          done
          echo "Product IP: $PIP"
          curl -fsS "http://$PIP:8000/" | grep -i "welcome"

      - name: Destroy staging RG
        if: always()
        run: az group delete -n $STG_RG --yes --no-wait