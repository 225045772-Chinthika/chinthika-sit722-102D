name: CD Stage 2 (Ephemeral Staging)

on:
  workflow_run:
    workflows: ["CI Testing"]     # must match your CI name from step 0
    types: [completed]
    branches: [testing]           # only when CI on testing finishes

jobs:
  staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}                 # e.g. myprodacr (no .azurecr.io)
      AZURE_LOCATION: ${{ secrets.AZURE_LOCATION || 'australiaeast' }}
      NAME_PREFIX: sit722-${{ github.run_id }}
      HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}       # SP JSON

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Tofu init/plan/apply (create RG + AKS)
        working-directory: staging
        run: |
          tofu init
          tofu plan  -var "name_prefix=${NAME_PREFIX}" -var "location=${AZURE_LOCATION}" -out tf.plan
          tofu apply -auto-approve tf.plan

      - name: Get AKS details & attach ACR pull permissions
        id: aks
        working-directory: staging
        run: |
          RG=$(tofu output -raw rg_name)
          AKS=$(tofu output -raw aks_name)
          echo "RG=$RG"   >> $GITHUB_OUTPUT
          echo "AKS=$AKS" >> $GITHUB_OUTPUT

          # allow the cluster MSI to pull from your ACR
          az aks update -g "$RG" -n "$AKS" --attach-acr "$ACR_NAME"

          # kubeconfig
          az aks get-credentials -g "$RG" -n "$AKS" --overwrite-existing

      - name: Deploy Kubernetes manifests
        run: |
          # ensure namespace exists
          kubectl create namespace sit722 || true

          # apply your manifests (services, deployments, etc.)
          kubectl apply -f k8s/ -n sit722

          # set commit-tagged images pushed by CI
          kubectl set image deployment/product-service  product=${ACR_NAME}.azurecr.io/product-service:${HEAD_SHA}       -n sit722 --record || true
          kubectl set image deployment/order-service    order=${ACR_NAME}.azurecr.io/order-service:${HEAD_SHA}           -n sit722 --record || true
          kubectl set image deployment/customer-service customer=${ACR_NAME}.azurecr.io/customer-service:${HEAD_SHA}     -n sit722 --record || true
          # (add frontend if you want to test it here too)

      - name: Wait for rollouts
        run: |
          kubectl rollout status deployment/product-service  -n sit722 --timeout=300s
          kubectl rollout status deployment/order-service    -n sit722 --timeout=300s
          kubectl rollout status deployment/customer-service -n sit722 --timeout=300s

      - name: Smoke test (product-service LB)
        run: |
          # Wait for external IP
          for i in {1..30}; do
            IP=$(kubectl get svc product-service -n sit722 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then echo "IP=$IP"; break; fi
            echo "Waiting for LoadBalancer IP..."; sleep 10
          done
          test -n "$IP"

          # Simple acceptance test â€” look for a welcome string
          curl -s --retry 10 --retry-delay 6 "http://${IP}/" | grep -i "welcome"

      - name: Destroy staging infra (always)
        if: always()
        working-directory: staging
        run: |
          tofu destroy -auto-approve -var "name_prefix=${NAME_PREFIX}" -var "location=${AZURE_LOCATION}"