apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-service
  namespace: sit722
spec:
  replicas: 1
  selector:
    matchLabels: { app: customer-svc }
  template:
    metadata:
      labels: { app: customer-svc }
    spec:
      containers:
      - name: customer-service
        image: ${ACR_NAME}.azurecr.io/customer-service:latest
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8002
        env:
          - name: PORT
            value: "8002"

          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              configMapKeyRef:
                name: app-config
                key: AZURE_STORAGE_ACCOUNT_NAME
          - name: AZURE_STORAGE_CONTAINER
            valueFrom:
              configMapKeyRef:
                name: app-config
                key: AZURE_STORAGE_CONTAINER
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: AZURE_STORAGE_ACCOUNT_KEY

          - name: DATABASE_URL
            value: postgresql://postgres:postgres@postgres:5432/customers
          - name: POSTGRES_HOST
            value: postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: customers
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: pg-secret
                key: POSTGRES_USER
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: pg-secret
                key: POSTGRES_PASSWORD

        readinessProbe:
          httpGet:
            path: /
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 10
          failureThreshold: 6
---
apiVersion: v1
kind: Service
metadata:
  name: customer-service
  namespace: sit722
spec:
  type: LoadBalancer
  selector: { app: customer-svc }
  ports:
    - port: 8002
      targetPort: 8002