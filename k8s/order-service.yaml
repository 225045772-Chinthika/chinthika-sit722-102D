apiVersion: v1
kind: Service
metadata: { name: order-service }
spec:
  type: LoadBalancer
  selector: { app: order-service }
  ports: [{ port: 8000, targetPort: 8000 }]
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: order-service }
spec:
  replicas: 1
  selector: { matchLabels: { app: order-service } }
  template:
    metadata: { labels: { app: order-service } }
    spec:
      containers:
      - name: order-service
        image: <ACR_LOGIN_SERVER>/order_service:latest
        imagePullPolicy: IfNotPresent
        ports: [{ containerPort: 8000 }]
        env:
        - { name: DATABASE_URL, value: postgresql://postgres:postgres@order-db:5432/orderdb }
        - { name: RABBITMQ_HOST, valueFrom: { configMapKeyRef: { name: app-config, key: ORDER_SERVICE_URL }}} # not used by app? keep only if needed
        - { name: AZURE_STORAGE_CONTAINER, valueFrom: { configMapKeyRef: { name: app-config, key: AZURE_STORAGE_CONTAINER }}}
        - { name: AZURE_STORAGE_ACCOUNT_NAME, valueFrom: { secretKeyRef: { name: app-secrets, key: AZURE_STORAGE_ACCOUNT_NAME }}}
        - { name: AZURE_STORAGE_ACCOUNT_KEY,  valueFrom: { secretKeyRef: { name: app-secrets, key: AZURE_STORAGE_ACCOUNT_KEY }}}
        readinessProbe: { httpGet: { path: /health, port: 8000 }, initialDelaySeconds: 5, periodSeconds: 5 }
        livenessProbe:  { httpGet: { path: /health, port: 8000 }, initialDelaySeconds: 10, periodSeconds: 10 }
        resources:
          requests: { cpu: "250m", memory: "128Mi" }
          limits:   { cpu: "500m", memory: "256Mi" }
